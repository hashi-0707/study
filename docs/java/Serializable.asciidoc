== Javaのシリアライズについて
=== シリアライズとデシリアライズ
==== シリアライズ
シリアライズとは直列化という意味。要はJavaのインスタンスをバイト列として出力するということ。 +
外部記憶装置にJavaインスタンスの情報を書き出したいというには、シリアライズする必要がある。 +
また、外部に書き出せるということは、書き出した情報をやり取り出来るということなので、ネットワーク上で
Javaインスタンスをやりとりしたいという場合は、シリアライズ出来る必要がある。

==== デシリアライズ
デシリアライズとは、シリアライズの逆でバイト列の情報をJavaインスタンスに変換すること。

=== 実装について
==== java.io.Serializableインターフェース
シリアライズするためには、java.io.Serializableインターフェースをimplementsする。 +
ただしjava.io.Serializableインターフェースには、何のメソッドもフィールドも定義されていない。 +
要は、このクラスはシリアライズすることを念頭において実装しています、ということを表している。
シリアライズ出来るということは、上述した通りネットワーク上でもやり取りが出来るということなので、
例えばjava.sql.Connectionなどはコネクションをファイルに書き込んで保存し、デシリアライズしたとしても
同じように使うことはできない。なので、java.io.Serializableインターフェースをimplementsして、シリアライズできますということを表現してはいけない。 +
※ただし実装だけなら出来る。java.io.Serializableインターフェースをimplementsしているが、実はシリアライズ出来ないというクラスを作れるということになる。

==== serialVersionUID
java.io.Serializableインターフェースを実装しているクラスのフィールドには、下記のようにserialVersionUIDが宣言されている。宣言しないとコンパイラから警告が出る。
[[serialVersionUID]]
[source,java]
.serialVersionUID宣言の例
----
public class Sample implements Serializable {
  private static final long serialVersionUID = 1L;
}
----

このIDには、インスタンスのバージョンを管理する役割がある。ネットワーク越しにJavaインスタンスをやり取りするときなど、
バージョンの差異で送信側のインスタンスには実装されているフィールドが、受信側のインスタンスには実装されていないということなどがよくあるらしい。 +
IDを振っておけば、デシリアライズするときに同じバージョン、つまり同じフィールドなど情報を持っているよね、ということが保証される。そのためインスタンスに修正を加えた際は、必ずこのバージョンを修正しないといけない。 +
また、一つのJVMでしたインスタンスを利用しない、そもそもネットワーク越しでインスタンスのやり取りをしないよという場合は、
serialVersionUIDを付与しない、java.io.Serializableインターフェースを実装しないという選択肢もあるらしい。

=== 参考文献
https://qiita.com/Sekky0905/items/b3c6776d10f183d8fc89[Javaのシリアライズ(直列化)メモ] +
https://daisuke-m.hatenablog.com/entry/20100414/1271228333[難解なSerializableという仕様について俺が知っていること、というか俺の理解]


